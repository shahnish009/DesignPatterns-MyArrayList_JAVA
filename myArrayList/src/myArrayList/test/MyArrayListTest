package myArrayList.test;

import myArrayList.MyArrayList;
import myArrayList.util.Results;
import java.util.Arrays;

public class MyArrayListTest {
	public void testMe(MyArrayList myArrayList, Results results) {
		myArrayList.emptyArr();
		insertMultipleValues(myArrayList, results);

		myArrayList.emptyArr();
		numberOfItems(myArrayList, results);

                myArrayList.emptyArr();
		removeAllInstances(myArrayList, results);

                myArrayList.emptyArr();
		indexOfFirstOccurrence(myArrayList, results);

                myArrayList.emptyArr();
                insertZeroes(myArrayList, results);

                myArrayList.emptyArr();
                sortedSum(myArrayList, results);

                myArrayList.emptyArr();
                valueNotPresent(myArrayList, results);

                myArrayList.emptyArr();
                indexOfEmptyArray(myArrayList, results);

                myArrayList.emptyArr();
                actualSizeOfArraylist(myArrayList, results);

                myArrayList.emptyArr();
                sumOfEmptyArraylist(myArrayList, results);
	}
	 private void insertMultipleValues(MyArrayList myArrayList, Results results) {
                myArrayList.insertSorted(20);
                myArrayList.insertSorted(10);
                myArrayList.insertSorted(30);
		int[] compArr = {10,20,30};

		if(Arrays.equals(compArr, myArrayList.testArr())) {
			results.storeNewResult("test -insert multiple values- passed");
		}
		else {
			results.storeNewResult("insertSorted() not working correctly");
		}
        }

	private void numberOfItems(MyArrayList myArrayList, Results results) {
		myArrayList.insertSorted(81);
                myArrayList.insertSorted(55);
                myArrayList.insertSorted(12);
                myArrayList.insertSorted(456);
                myArrayList.insertSorted(20);
		int[] compArr = {12,20,55,81,456};

		if(Arrays.equals(compArr, myArrayList.testArr()) && compArr.length == myArrayList.size()) {
                        results.storeNewResult("test -number of actual items in arraylist- passed");
                }
                else {
                        results.storeNewResult("size() not working correctly");
                }
	}
	private void removeAllInstances(MyArrayList myArrayList, Results results) {
                myArrayList.insertSorted(81);
                myArrayList.insertSorted(55);
                myArrayList.insertSorted(12);
                myArrayList.insertSorted(55);
                myArrayList.insertSorted(81);
                myArrayList.insertSorted(32);
 		myArrayList.removeValue(81);
                myArrayList.removeValue(55);
		int[] compArr = {12,32};

		if(Arrays.equals(compArr, myArrayList.testArr())) {
                        results.storeNewResult("test -removing all instances- passed");
                }
                else {
                        results.storeNewResult("removeValue() not working correctly");
                }
	}

	private void indexOfFirstOccurrence(MyArrayList myArrayList, Results results) {
                myArrayList.insertSorted(65);
                myArrayList.insertSorted(98);
                myArrayList.insertSorted(20);
                myArrayList.insertSorted(65);
                myArrayList.removeValue(98);
                int[] compArr = {20,65,65};

                if(Arrays.equals(compArr, myArrayList.testArr()) && myArrayList.indexOf(65) == 1) {
                        results.storeNewResult("test -index of first occurrence- passed");
                }
                else {
                        results.storeNewResult("indexOf() not working correctly");
                }
	}

	private void insertZeroes(MyArrayList myArrayList, Results results) {
                myArrayList.insertSorted(0);
                myArrayList.insertSorted(0);
                myArrayList.insertSorted(0);
		int[] compArr = {0,0,0};

		if(Arrays.equals(compArr, myArrayList.testArr()) && myArrayList.size() == 3) {
                        results.storeNewResult("test -insert zeroes in arraylist- passed");
                }
                else {
                        results.storeNewResult("insertSorted() not working correctly for specific values");
                }
	}

        private void sortedSum(MyArrayList myArrayList, Results results) {
                myArrayList.insertSorted(65);
                myArrayList.insertSorted(105);
                myArrayList.insertSorted(86);
                int[] compArr = {65,86,105};

                if(Arrays.equals(compArr, myArrayList.testArr()) && myArrayList.sum() == 256) {
                        results.storeNewResult("test -sum of sorted values- passed");
                }
                else {
                        results.storeNewResult("sum() not working correctly");
                }
        }

        private void valueNotPresent(MyArrayList myArrayList, Results results) {
                myArrayList.insertSorted(65);
                myArrayList.insertSorted(105);
                myArrayList.insertSorted(86);
                int[] compArr = {65,86,105};

                if(Arrays.equals(compArr, myArrayList.testArr()) && myArrayList.indexOf(99) == -1) {
                        results.storeNewResult("test -value not present in arraylist- passed");
                }
                else {
                        results.storeNewResult("indexOf() not working correctly");
                }
        }

        private void indexOfEmptyArray(MyArrayList myArrayList, Results results) {

                if(myArrayList.indexOf(25) == -1) {
                        results.storeNewResult("test -index of empty array- passed");
                }
                else {
                        results.storeNewResult("indexOf() not working correctly");
                }
        }

        private void actualSizeOfArraylist(MyArrayList myArrayList, Results results) {
                for(int i = 0; i < 54; i++) {
			myArrayList.insertSorted(65);
		}

                if(myArrayList.size() == 54) {
                        results.storeNewResult("test -actual size of arraylist for many values- passed");
                }
                else {
                        results.storeNewResult("indexOf() not working correctly");
                }
        }

        private void sumOfEmptyArraylist(MyArrayList myArrayList, Results results) {

                if(myArrayList.sum() == 0) {
                        results.storeNewResult("test -sum of empty arraylist- passed");
                }
                else {
                        results.storeNewResult("sum() not working correctly");
                }
        }
}
